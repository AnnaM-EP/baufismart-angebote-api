/*
 * Ergebnislisten API
 * Ein Service um eine Ergebnisliste mit Finanzierungsvorschlägen zu ermitteln.
 *
 * OpenAPI spec version: 1.0
 * Contact: helpdesk@europace2.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package de.europace.eli.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import de.europace.eli.model.SituationNachRenteneintritt;
import de.europace.eli.model.Staat;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;
import java.time.LocalDate;

/**
 * Beschaeftigung
 */

public class Beschaeftigung {
  @JsonProperty("anzahlGehaelterProJahr")
  private Double anzahlGehaelterProJahr = null;

  @JsonProperty("arbeitgeber")
  private String arbeitgeber = null;

  @JsonProperty("arbeitgeberInDeutschlandAnsaessig")
  private Boolean arbeitgeberInDeutschlandAnsaessig = null;

  @JsonProperty("arbeitgeberLand")
  private Staat arbeitgeberLand = null;

  /**
   * Gets or Sets art
   */
  public enum ArtEnum {
    ANGESTELLTER("ANGESTELLTER"),
    
    ARBEITER("ARBEITER"),
    
    BEAMTER("BEAMTER"),
    
    FREIBERUFLER("FREIBERUFLER"),
    
    SELBSTAENDIGER("SELBSTAENDIGER"),
    
    RENTNER("RENTNER"),
    
    HAUSFRAU("HAUSFRAU"),
    
    ARBEITSLOSER("ARBEITSLOSER");

    private String value;

    ArtEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ArtEnum fromValue(String text) {
      for (ArtEnum b : ArtEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("art")
  private ArtEnum art = null;

  /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER
   */
  public enum BefristungsStatusEnum {
    BEFRISTET("BEFRISTET"),
    
    UNBEFRISTET("UNBEFRISTET");

    private String value;

    BefristungsStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BefristungsStatusEnum fromValue(String text) {
      for (BefristungsStatusEnum b : BefristungsStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("befristungsStatus")
  private BefristungsStatusEnum befristungsStatus = null;

  @JsonProperty("beruf")
  private String beruf = null;

  @JsonProperty("beschaeftigtSeit")
  private LocalDate beschaeftigtSeit = null;

  /**
   * Allgemeine Branche des Antragstellers. Wird verwendet um für die verschiedenen Banken die Zusatzangabe Branche zu bilden.
   */
  public enum BrancheEnum {
    LANDWIRTSCHAFT_FORSTWIRTSCHAFT_FISCHEREI("LANDWIRTSCHAFT_FORSTWIRTSCHAFT_FISCHEREI"),
    
    BERGBAU_GEWINNUNG_VON_STEINEN_UND_ERDEN("BERGBAU_GEWINNUNG_VON_STEINEN_UND_ERDEN"),
    
    VERARBEITENDES_GEWERBE("VERARBEITENDES_GEWERBE"),
    
    WASSERVERSORGUNG("WASSERVERSORGUNG"),
    
    ENERGIEVERSORGUNG("ENERGIEVERSORGUNG"),
    
    BAUGEWERBE("BAUGEWERBE"),
    
    HANDEL_INSTANDHALTUNG_VON_KRAFTFAHRZEUGEN("HANDEL_INSTANDHALTUNG_VON_KRAFTFAHRZEUGEN"),
    
    VERKEHR_LOGISTIK("VERKEHR_LOGISTIK"),
    
    GASTGEWERBE("GASTGEWERBE"),
    
    INFORMATION_KOMMUNIKATION("INFORMATION_KOMMUNIKATION"),
    
    FINANZ_UND_VERSICHERUNGSDIENSTLEISTUNGEN("FINANZ_UND_VERSICHERUNGSDIENSTLEISTUNGEN"),
    
    GRUNDST_CKS_UND_WOHNUNGSWESEN("GRUNDSTÜCKS_UND_WOHNUNGSWESEN"),
    
    FREIBERUFLICHE_WISSENSCHAFTLICHE_UND_TECHNISCHE_DIENSTLEISTUNGEN("FREIBERUFLICHE_WISSENSCHAFTLICHE_UND_TECHNISCHE_DIENSTLEISTUNGEN"),
    
    SONSTIGE_WIRTSCHAFTLICHE_DIENSTLEISTUNGEN("SONSTIGE_WIRTSCHAFTLICHE_DIENSTLEISTUNGEN"),
    
    OEFFENTLICHE_VERWALTUNG_VERTEIDIGUNG_SOZIALVERSICHERUNG("OEFFENTLICHE_VERWALTUNG_VERTEIDIGUNG_SOZIALVERSICHERUNG"),
    
    ERZIEHUNG_UNTERRICHT("ERZIEHUNG_UNTERRICHT"),
    
    GESUNDHEIT_UND_SOZIALWESEN("GESUNDHEIT_UND_SOZIALWESEN"),
    
    KUNST_UNTERHALTUNG_ERHOLUNG("KUNST_UNTERHALTUNG_ERHOLUNG"),
    
    SONSTIGE_DIENSTLEISTUNGEN("SONSTIGE_DIENSTLEISTUNGEN"),
    
    PRIVATE_HAUSHALTE("PRIVATE_HAUSHALTE");

    private String value;

    BrancheEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BrancheEnum fromValue(String text) {
      for (BrancheEnum b : BrancheEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("branche")
  private BrancheEnum branche = null;

  @JsonProperty("einkommenNettoJaehrlich")
  private BigDecimal einkommenNettoJaehrlich = null;

  @JsonProperty("einkommenNettoMonatlich")
  private BigDecimal einkommenNettoMonatlich = null;

  @JsonProperty("inProbezeit")
  private Boolean inProbezeit = null;

  @JsonProperty("situationNachRenteneintritt")
  private SituationNachRenteneintritt situationNachRenteneintritt = null;

  /**
   * nur bei art &#x3D;&#x3D; FREIBERUFLER, SELBSTAENDIGER.
   */
  public enum TaetigkeitEnum {
    ALTENPFLEGER("ALTENPFLEGER"),
    
    AMBULANTER_KRANKENPFLEGER("AMBULANTER_KRANKENPFLEGER"),
    
    ANWALT("ANWALT"),
    
    APOTHEKER("APOTHEKER"),
    
    ARCHITEKT("ARCHITEKT"),
    
    ARZT("ARZT"),
    
    BESTATTER("BESTATTER"),
    
    DATENSCHUTZBEAUFTRAGTER("DATENSCHUTZBEAUFTRAGTER"),
    
    DEKORATEUR("DEKORATEUR"),
    
    DIAETASSISTENT("DIAETASSISTENT"),
    
    DOLMETSCHER("DOLMETSCHER"),
    
    EDV_BERATER("EDV_BERATER"),
    
    ERGOTHERAPEUT("ERGOTHERAPEUT"),
    
    ERNAEHRUNGSBERATER("ERNAEHRUNGSBERATER"),
    
    FOTOGRAF("FOTOGRAF"),
    
    GEOGRAF("GEOGRAF"),
    
    GRAFIKDESIGNER("GRAFIKDESIGNER"),
    
    GRAFIKER("GRAFIKER"),
    
    HEBAMME("HEBAMME"),
    
    HEILMASSEUR("HEILMASSEUR"),
    
    HEILPRAKTIKER("HEILPRAKTIKER"),
    
    HISTORIKER("HISTORIKER"),
    
    INFORMATIKER("INFORMATIKER"),
    
    INGENIEUR("INGENIEUR"),
    
    INSOLVENZVERWALTER("INSOLVENZVERWALTER"),
    
    JOURNALIST("JOURNALIST"),
    
    KLASSISCHER_KONZERTMUSIKER("KLASSISCHER_KONZERTMUSIKER"),
    
    KONSTRUKTEUR("KONSTRUKTEUR"),
    
    KRANKENGYMNAST("KRANKENGYMNAST"),
    
    KRANKENPFLEGER("KRANKENPFLEGER"),
    
    KRANKENSCHWESTER("KRANKENSCHWESTER"),
    
    LOGOPAEDE("LOGOPAEDE"),
    
    MEDIZINISCH_TECHN_ASSISTENT("MEDIZINISCH_TECHN_ASSISTENT"),
    
    NOTAR("NOTAR"),
    
    OPERNSAENGER("OPERNSAENGER"),
    
    PERSONALBERATER("PERSONALBERATER"),
    
    PHYSIOTHERAPEUT("PHYSIOTHERAPEUT"),
    
    PSYCHOLOGE("PSYCHOLOGE"),
    
    RAUMAUSSTATTER("RAUMAUSSTATTER"),
    
    RUNDFUNKSPRECHER("RUNDFUNKSPRECHER"),
    
    SACHVERSTAENDIGER("SACHVERSTAENDIGER"),
    
    STADTPLANER("STADTPLANER"),
    
    STATIKER("STATIKER"),
    
    STEUERBERATER("STEUERBERATER"),
    
    TIERARZT("TIERARZT"),
    
    UNTERNEHMENSBERATER("UNTERNEHMENSBERATER"),
    
    VERMITTLER("VERMITTLER"),
    
    WIRTSCH_BUCHPRUEFER_REVISOR("WIRTSCH_BUCHPRUEFER_REVISOR"),
    
    ZAHNARZT("ZAHNARZT"),
    
    ZAHNTECHNIKER("ZAHNTECHNIKER"),
    
    SONSTIGES("SONSTIGES");

    private String value;

    TaetigkeitEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TaetigkeitEnum fromValue(String text) {
      for (TaetigkeitEnum b : TaetigkeitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("taetigkeit")
  private TaetigkeitEnum taetigkeit = null;

  public Beschaeftigung anzahlGehaelterProJahr(Double anzahlGehaelterProJahr) {
    this.anzahlGehaelterProJahr = anzahlGehaelterProJahr;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER, BEAMTER
   * @return anzahlGehaelterProJahr
  **/
  @ApiModelProperty(value = "nur bei art == ANGESTELLTER, ARBEITER, BEAMTER")
  public Double getAnzahlGehaelterProJahr() {
    return anzahlGehaelterProJahr;
  }

  public void setAnzahlGehaelterProJahr(Double anzahlGehaelterProJahr) {
    this.anzahlGehaelterProJahr = anzahlGehaelterProJahr;
  }

  public Beschaeftigung arbeitgeber(String arbeitgeber) {
    this.arbeitgeber = arbeitgeber;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER, BEAMTER
   * @return arbeitgeber
  **/
  @ApiModelProperty(value = "nur bei art == ANGESTELLTER, ARBEITER, BEAMTER")
  public String getArbeitgeber() {
    return arbeitgeber;
  }

  public void setArbeitgeber(String arbeitgeber) {
    this.arbeitgeber = arbeitgeber;
  }

  public Beschaeftigung arbeitgeberInDeutschlandAnsaessig(Boolean arbeitgeberInDeutschlandAnsaessig) {
    this.arbeitgeberInDeutschlandAnsaessig = arbeitgeberInDeutschlandAnsaessig;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER, BEAMTER
   * @return arbeitgeberInDeutschlandAnsaessig
  **/
  @ApiModelProperty(example = "false", value = "nur bei art == ANGESTELLTER, ARBEITER, BEAMTER")
  public Boolean getArbeitgeberInDeutschlandAnsaessig() {
    return arbeitgeberInDeutschlandAnsaessig;
  }

  public void setArbeitgeberInDeutschlandAnsaessig(Boolean arbeitgeberInDeutschlandAnsaessig) {
    this.arbeitgeberInDeutschlandAnsaessig = arbeitgeberInDeutschlandAnsaessig;
  }

  public Beschaeftigung arbeitgeberLand(Staat arbeitgeberLand) {
    this.arbeitgeberLand = arbeitgeberLand;
    return this;
  }

   /**
   * Get arbeitgeberLand
   * @return arbeitgeberLand
  **/
  @ApiModelProperty(value = "")
  public Staat getArbeitgeberLand() {
    return arbeitgeberLand;
  }

  public void setArbeitgeberLand(Staat arbeitgeberLand) {
    this.arbeitgeberLand = arbeitgeberLand;
  }

  public Beschaeftigung art(ArtEnum art) {
    this.art = art;
    return this;
  }

   /**
   * Get art
   * @return art
  **/
  @ApiModelProperty(value = "")
  public ArtEnum getArt() {
    return art;
  }

  public void setArt(ArtEnum art) {
    this.art = art;
  }

  public Beschaeftigung befristungsStatus(BefristungsStatusEnum befristungsStatus) {
    this.befristungsStatus = befristungsStatus;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER
   * @return befristungsStatus
  **/
  @ApiModelProperty(value = "nur bei art == ANGESTELLTER, ARBEITER")
  public BefristungsStatusEnum getBefristungsStatus() {
    return befristungsStatus;
  }

  public void setBefristungsStatus(BefristungsStatusEnum befristungsStatus) {
    this.befristungsStatus = befristungsStatus;
  }

  public Beschaeftigung beruf(String beruf) {
    this.beruf = beruf;
    return this;
  }

   /**
   * nur bei art !&#x3D; RENTNER
   * @return beruf
  **/
  @ApiModelProperty(value = "nur bei art != RENTNER")
  public String getBeruf() {
    return beruf;
  }

  public void setBeruf(String beruf) {
    this.beruf = beruf;
  }

  public Beschaeftigung beschaeftigtSeit(LocalDate beschaeftigtSeit) {
    this.beschaeftigtSeit = beschaeftigtSeit;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER, BEAMTER, FREIBERUFLER, SELBSTAENDIGER
   * @return beschaeftigtSeit
  **/
  @ApiModelProperty(value = "nur bei art == ANGESTELLTER, ARBEITER, BEAMTER, FREIBERUFLER, SELBSTAENDIGER")
  public LocalDate getBeschaeftigtSeit() {
    return beschaeftigtSeit;
  }

  public void setBeschaeftigtSeit(LocalDate beschaeftigtSeit) {
    this.beschaeftigtSeit = beschaeftigtSeit;
  }

  public Beschaeftigung branche(BrancheEnum branche) {
    this.branche = branche;
    return this;
  }

   /**
   * Allgemeine Branche des Antragstellers. Wird verwendet um für die verschiedenen Banken die Zusatzangabe Branche zu bilden.
   * @return branche
  **/
  @ApiModelProperty(value = "Allgemeine Branche des Antragstellers. Wird verwendet um für die verschiedenen Banken die Zusatzangabe Branche zu bilden.")
  public BrancheEnum getBranche() {
    return branche;
  }

  public void setBranche(BrancheEnum branche) {
    this.branche = branche;
  }

  public Beschaeftigung einkommenNettoJaehrlich(BigDecimal einkommenNettoJaehrlich) {
    this.einkommenNettoJaehrlich = einkommenNettoJaehrlich;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; FREIBERUFLER, SELBSTAENDIGER
   * @return einkommenNettoJaehrlich
  **/
  @ApiModelProperty(value = "nur bei art == FREIBERUFLER, SELBSTAENDIGER")
  public BigDecimal getEinkommenNettoJaehrlich() {
    return einkommenNettoJaehrlich;
  }

  public void setEinkommenNettoJaehrlich(BigDecimal einkommenNettoJaehrlich) {
    this.einkommenNettoJaehrlich = einkommenNettoJaehrlich;
  }

  public Beschaeftigung einkommenNettoMonatlich(BigDecimal einkommenNettoMonatlich) {
    this.einkommenNettoMonatlich = einkommenNettoMonatlich;
    return this;
  }

   /**
   * nur bei art !&#x3D; FREIBERUFLER, SELBSTAENDIGER
   * @return einkommenNettoMonatlich
  **/
  @ApiModelProperty(value = "nur bei art != FREIBERUFLER, SELBSTAENDIGER")
  public BigDecimal getEinkommenNettoMonatlich() {
    return einkommenNettoMonatlich;
  }

  public void setEinkommenNettoMonatlich(BigDecimal einkommenNettoMonatlich) {
    this.einkommenNettoMonatlich = einkommenNettoMonatlich;
  }

  public Beschaeftigung inProbezeit(Boolean inProbezeit) {
    this.inProbezeit = inProbezeit;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; ANGESTELLTER, ARBEITER, BEAMTER
   * @return inProbezeit
  **/
  @ApiModelProperty(example = "false", value = "nur bei art == ANGESTELLTER, ARBEITER, BEAMTER")
  public Boolean getInProbezeit() {
    return inProbezeit;
  }

  public void setInProbezeit(Boolean inProbezeit) {
    this.inProbezeit = inProbezeit;
  }

  public Beschaeftigung situationNachRenteneintritt(SituationNachRenteneintritt situationNachRenteneintritt) {
    this.situationNachRenteneintritt = situationNachRenteneintritt;
    return this;
  }

   /**
   * nur bei art !&#x3D; RENTNER
   * @return situationNachRenteneintritt
  **/
  @ApiModelProperty(value = "nur bei art != RENTNER")
  public SituationNachRenteneintritt getSituationNachRenteneintritt() {
    return situationNachRenteneintritt;
  }

  public void setSituationNachRenteneintritt(SituationNachRenteneintritt situationNachRenteneintritt) {
    this.situationNachRenteneintritt = situationNachRenteneintritt;
  }

  public Beschaeftigung taetigkeit(TaetigkeitEnum taetigkeit) {
    this.taetigkeit = taetigkeit;
    return this;
  }

   /**
   * nur bei art &#x3D;&#x3D; FREIBERUFLER, SELBSTAENDIGER.
   * @return taetigkeit
  **/
  @ApiModelProperty(value = "nur bei art == FREIBERUFLER, SELBSTAENDIGER.")
  public TaetigkeitEnum getTaetigkeit() {
    return taetigkeit;
  }

  public void setTaetigkeit(TaetigkeitEnum taetigkeit) {
    this.taetigkeit = taetigkeit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Beschaeftigung beschaeftigung = (Beschaeftigung) o;
    return Objects.equals(this.anzahlGehaelterProJahr, beschaeftigung.anzahlGehaelterProJahr) &&
        Objects.equals(this.arbeitgeber, beschaeftigung.arbeitgeber) &&
        Objects.equals(this.arbeitgeberInDeutschlandAnsaessig, beschaeftigung.arbeitgeberInDeutschlandAnsaessig) &&
        Objects.equals(this.arbeitgeberLand, beschaeftigung.arbeitgeberLand) &&
        Objects.equals(this.art, beschaeftigung.art) &&
        Objects.equals(this.befristungsStatus, beschaeftigung.befristungsStatus) &&
        Objects.equals(this.beruf, beschaeftigung.beruf) &&
        Objects.equals(this.beschaeftigtSeit, beschaeftigung.beschaeftigtSeit) &&
        Objects.equals(this.branche, beschaeftigung.branche) &&
        Objects.equals(this.einkommenNettoJaehrlich, beschaeftigung.einkommenNettoJaehrlich) &&
        Objects.equals(this.einkommenNettoMonatlich, beschaeftigung.einkommenNettoMonatlich) &&
        Objects.equals(this.inProbezeit, beschaeftigung.inProbezeit) &&
        Objects.equals(this.situationNachRenteneintritt, beschaeftigung.situationNachRenteneintritt) &&
        Objects.equals(this.taetigkeit, beschaeftigung.taetigkeit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anzahlGehaelterProJahr, arbeitgeber, arbeitgeberInDeutschlandAnsaessig, arbeitgeberLand, art, befristungsStatus, beruf, beschaeftigtSeit, branche, einkommenNettoJaehrlich, einkommenNettoMonatlich, inProbezeit, situationNachRenteneintritt, taetigkeit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Beschaeftigung {\n");
    
    sb.append("    anzahlGehaelterProJahr: ").append(toIndentedString(anzahlGehaelterProJahr)).append("\n");
    sb.append("    arbeitgeber: ").append(toIndentedString(arbeitgeber)).append("\n");
    sb.append("    arbeitgeberInDeutschlandAnsaessig: ").append(toIndentedString(arbeitgeberInDeutschlandAnsaessig)).append("\n");
    sb.append("    arbeitgeberLand: ").append(toIndentedString(arbeitgeberLand)).append("\n");
    sb.append("    art: ").append(toIndentedString(art)).append("\n");
    sb.append("    befristungsStatus: ").append(toIndentedString(befristungsStatus)).append("\n");
    sb.append("    beruf: ").append(toIndentedString(beruf)).append("\n");
    sb.append("    beschaeftigtSeit: ").append(toIndentedString(beschaeftigtSeit)).append("\n");
    sb.append("    branche: ").append(toIndentedString(branche)).append("\n");
    sb.append("    einkommenNettoJaehrlich: ").append(toIndentedString(einkommenNettoJaehrlich)).append("\n");
    sb.append("    einkommenNettoMonatlich: ").append(toIndentedString(einkommenNettoMonatlich)).append("\n");
    sb.append("    inProbezeit: ").append(toIndentedString(inProbezeit)).append("\n");
    sb.append("    situationNachRenteneintritt: ").append(toIndentedString(situationNachRenteneintritt)).append("\n");
    sb.append("    taetigkeit: ").append(toIndentedString(taetigkeit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

